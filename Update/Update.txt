//index.js

import express from "express";
import dotenv from "dotenv";
import mongoose from "mongoose";
import cors from "cors";
import cookieParser from "cookie-parser";

import tourRoute from "./routes/tours.js";
import userRoute from "./routes/users.js";
import authRoute from "./routes/auth.js";
import reviewRoute from "./routes/reviews.js";

dotenv.config()
const app = express();
const port = process.env.PORT || 8000;
const corsOptions = {
  origin: true,
  credentials: true,
};

//database connection

mongoose.set("strictQuery", false);
const connect = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI, {
      useNewURLParser: true,
      useUnifiedTopology: true,
    });
    console.log("Connected to Database Successfully");
  } catch (err) {
    console.log("Failure Detected in Connection to Database");
  }
};

//middleware

app.use(express.json());
app.use(cors(corsOptions));
app.use(cookieParser());

app.use("/api/v1/auth", authRoute);
app.use("/api/v1/tours", tourRoute);
app.use("/api/v1/users", userRoute);
app.use("/api/v1/review", reviewRoute);

app.listen(port, () => {
  connect();
  console.log("Server Listening on Port", port);
});


// Tour Controllers.js

import Tour from "../models/Tour.js";

///Create NewTour

export const CreateTour = async (req, res) => {
  const newTour = new Tour(req.body);

  try {
    const savedTour = await newTour.save();
    res.status(200).json({
      sucess: true,
      message: "Successfully Created",
      data: savedTour,
    });
  } catch (err) {
    res.status(500).json({ sucess: false, message: "Failed to Create" });
  }
};

// Update Tour
export const UpdateTour = async (req, res) => {
  const id = req.params.id;

  try {
    const UpdateTour = await Tour.findByIdAndUpdate(
      id,
      { $set: req.body },
      { new: true }
    );
    res.status(200).json({
      sucess: true,
      message: "Successfully Updated",
      data: UpdateTour,
    });
  } catch (err) {
    res.status(500).json({ sucess: false, message: "Failed to Update" });
  }
};

// Delete Tour

export const DeleteTour = async (req, res) => {
  const id = req.params.id;

  try {
    await Tour.findByIdAndDelete(id);

    res.status(200).json({
      success: true,
      message: "Successfully Deleted",
    });
  } catch (err) {
    res.status(501).json({ success: false, message: "Failed to Delete" });
  }
};

// GetSingle Tour

export const GetSingleTour = async (req, res) => {
  const id = req.params.id;

  try {
    const tour = await Tour.findById(id);

    res.status(200).json({
      sucess: true,
      message: "Successfully Founded",
      data: tour,
    });
  } catch (err) {
    res.status(404).json({ sucess: false, message: "Not Found" });
  }
};

// GetAll Tour

export const GetAllTour = async (req, res) => {
  // For Pagination
  const page = parseInt(req.query.page);

  console.log(page);
  try {
    const tours = await Tour.find({})
      .skip(page * 8)                      // Counting logic
      .limit(8);

    res.status(200).json({
      sucess: true,
      count: tours.length,
      message: "Successfully",
      data: tours,
    });
  } catch (err) {
    res.status(404).json({ sucess: false, message: "Not Found" });
  }
};

// Get Tour by Search

export const GetTourbySearch = async (req, res) => {
  //here i for case sensitive
  const city = new RegExp(req.query.city, "i");
  const distance = parseInt(req.query.distance);
  const maxGroupSize = parseInt(req.query.maxGroupSize);

  try {
    const tours = await Tour.find({
      city,
      distance: { $gte: distance },
      maxGroupSize: { $gte: maxGroupSize },
    });
    res.status(200).json({
      sucess: true,
      message: "Successfully",
      data: tours,
    });
  } catch (err) {
    res.status(200).json({
      sucess: false,
      message: "Not found",
    });
  }
};

// GetFeatured Tour

export const GetFeatured = async (req, res) => {
  try {
    const tours = await Tour.find({ featured: true }).limit(8);
    res.status(200).json({
      sucess: true,
      count: tours.length,
      message: "Successfully",
      data: tours,
    });
  } catch (err) {
    res.status(404).json({ sucess: false, message: "Not Found" });
  }
};

// Get Tour counts

export const GetTourCount = async (req, res) => {
  try {
    const tourCount = await Tour.estimatedDocumentCount();
    res.status(200).json({ success: true, data: tourCount });
  } catch (err) {
    res.status(500).json({ success: false, message: "Failed to fetch" });
  }
};


// Routes - tours.js

import express from 'express';
import { CreateTour,DeleteTour, GetAllTour, GetFeatured, GetSingleTour, UpdateTour, GetTourbySearch, GetTourCount } from '../controllers/toursControllers.js';

const router = express.Router();

//create New Tour
router.post('/',CreateTour);

//create Update Tour
router.put('/:id',UpdateTour);

//create Delete Tour
router.delete('/:id',DeleteTour);

//create Get Single Tour
router.get('/:id',GetSingleTour);

//create Get All Tour
router.get('/',GetAllTour);

//create Get Tour by Search
router.get('/search/getTourBySearch',GetTourbySearch);

//create Get Tour by Featured
router.get('/search/getTourByFeatured',GetFeatured);

//create Get Tour by Count
router.get('/search/getTourByCount',GetTourCount);

export default  router;


// ENV File 

PORT  = 4000
MONGO_URI="mongodb+srv://sajalsksk1jan:biIeqg0oFKvYCvyM@cluster0.gjqt5fs.mongodb.net/tour_booking?retryWrites=true&w=majority"

UserController.js

import User from '../models/User.js'

///Create NewUser

export const CreateUser = async (req,res)=>{
    const newUser = new User(req.body);

    try {
        const savedUser = await newUser.save();
        res 
          .status(200)
          .json({
            sucess:true,
            message:"Successfully Created",
            data :savedUser
          });
    }  catch(err) {
        res
        .status(500)
        .json ({sucess:false ,message:"Failed to Create"});
    }
};

// UserController User 

export const UpdateUser =async (req,res)=>{
  const id = req.params.id;
  
  try{
       const UpdateUser = await User.findByIDAndUpdate(
        id, {
          $set :req.body,
        },
        {new :true}
       );

       res.status(200).json({
        sucess:true,
        message:"Successfully Updated",
        data :UpdateUser,
       })
  }
  catch(err){
    res
    .status(500)
    .json ({sucess:false ,message:"Failed to Update"});
}
};

// Delete User 

export const DeleteUser =async (req,res)=>{
  const id = req.params.id;
  try{
       await User.findByIDAndDelete(id);

       res.status(200).json({
        sucess:true,
        message:"Successfully Deleted",
        
       })
  }
  catch(err){
    res
    .status(501)
    .json ({sucess:false ,message:"Failed to Delete"});
}
};

// GetSingle User 

export const GetSingleUser =async (req,res)=>{
  const id = req.params.id;

  try{
      const user= await User.findByID(id);

       res.status(200).json({
        sucess:true,
        message:"Successfully Founded",
        data : user,
        
       })
  }
  catch(err){
    res
    .status(404)
    .json ({sucess:false ,message:"Not Found"});
}
};

// GetAll User 

export const GetAllUser =async (req,res)=>{
 
  console.log(page);
  try{
      const users= await User.find({})
    

       res.status(200).json({
        sucess:true,
        message:"Successfully",
        data : users,
        
       })
  }
  catch(err){
    res
    .status(404)
    .json ({sucess:false ,message:"Not Found"});
}
};


user.js

import express from 'express';
import { DeleteUser, GetAllUser, GetSingleUser, UpdateUser } from '../controllers/UserControllers.js';
const router = express.Router();

//create Update User
router.put("/:id",UpdateUser);

//create Delete User
router.delete('/:id',DeleteUser);

//create Get Single User
router.get('/:id',GetSingleUser);

//create Get All User
router.get('/',GetAllUser);


export default  router;



// Auth Controllers

import User from "../models/User.js";
import bcrypt from "bcryptjs";
import jwt from "jsonwebtoken";

//User Registration
export const register = async (req, res) => {
  try {
    const salt = bcrypt.genSaltSync(10);
    const hash = bcrypt.hashSync(req.body.password, salt);
    const newUser = new User({
      username: req.body.username,
      email: req.body.email,
      password: hash,
      photo: req.body.photo,
    });

    await newUser.save();

    res.status(200).json({ success: true, message: "Succesfully Created" });
  } catch (err) {
    res.status(500).json({ success: false, message: "Not Created. Try again" });
  }
};


// User Login
export const login = async (req, res) => {
  const email = req.body.email;
  try {
    const user = await User.findOne({ email });

    // If user doesn't Exist
    if (!user) {
      return res
        .status(404)
        .json({ success: false, message: "User Not Found" });
    }
    // if user exis checking for correct password
    const checkCorrectPassword = bcrypt.compare(req.body.password, user.password);

    // if incorrect password
    if(!checkCorrectPassword) {
        return res 
        .status(401)
        .json({success:false,message:"Incorrect email or passwors"});
    }

    const {password,role,...rest} = user._doc;

    // create jwt token
    const token = jwt.sign(
        {id:user._id , role:user.role},
        process.env.JWT_SECRET_KEY,
        {expiresIn:"15d"}
    );

    // set token int the browser cookies

    res.
    cookie("accessToken",token,{
        httpOnly:true,
        expires:token.expiresIn,
    }).status(200)
    .json({success:true,message:"Successfully Login",data:{...rest},});
  } catch (err) {
    return res 
    .status(500)
    .json({success:false,message:"Failed to Login"});
  }
};


//Auth.js


import express from 'express';

import { login,register } from '../controllers/authControllers.js';

const router = express.Router();

router.post('/register',register)
router.post('login',login)

export default router;


// Reviews.js
import express from 'express';
import { createReview } from '../controllers/reviewController.js';
import { verifyUser } from '../utils/verifyToken.js';


const router = express.Router();

router.post('/:tourId',verifyUser,createReview)

export default router;


// Review Controllers

import Tour from "../models/Tour.js";
import Review from "../models/Review.js";

export const createReview = async (req, res) => {
  const tourId = req.params.tourId;
  const newReview = new Review({ ...req.body });
  try {
    const savedReview = await newReview.save();
    // after creating a new Review now updating the review of array
    await Tour.findByIdAndUpdate(tourId, {
      $push: { review: savedReview._id },
    });

    res
      .status(200)
      .json({ sucess: "true", message: "Review Subitted", data: savedReview });
  } catch (err) {
    res.status(200).json({ sucess: "false", message: "Failed to Submit" });
  }
};



// booking.js

import express from 'express';
import { verifyAdmin, verifyUser } from '../utils/verifyToken.js';
import { createBooking, getAllBooking, getBooking } from '../controllers/bookingController.js';


const router = express.Router();

router.post('/',verifyUser,createBooking)
router.get('/:id',verifyUser,getBooking)
router.get('/',verifyAdmin,getAllBooking)

export default router;

// bookingController

import Booking from "../models/Booking.js";


// create new Booking
export const createBooking = async (req, res) => {
    const newBooking = new Booking(req.body);
    try {
      const savedBooking = await newBooking.save();
      res
        .status(200)
        .json({ sucess: "true", message: "Your Tour is Booked", data: savedBooking });
    } catch (err) {
      res.status(200).json({ sucess: "false", message: "Failed to Book due to Server Issues" });
    }
}


// get single booking
export const getBooking = async (req, res) => {
    const Id = req.params.tourId;
  
    try {
      const book = await Booking.findById(Id);
      res
        .status(200)
        .json({ sucess: "true", message: "Successfull", data: book });
    } catch (err) {
      res.status(404).json({ sucess: "true", message: "Not Found" });
    }
  };

  // get All booking
export const getAllBooking = async (req, res) => {
    
    try {
      const books = await Booking.find();
      res
        .status(200)
        .json({ sucess: "true", message: "Successfull", data: books });
    } catch (err) {
      res.status(500).json({ sucess: "true", message: "Not Found your Bookings" });
    }
  };
